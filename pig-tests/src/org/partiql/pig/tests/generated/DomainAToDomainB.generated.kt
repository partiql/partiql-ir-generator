

/**
 * This code was generated by the PartiQL I.R. Generator.
 * Do not modify this file.  
 */
@file:Suppress("unused", "MemberVisibilityCanBePrivate", "FunctionName",
"CanBePrimaryConstructorProperty", "UNNECESSARY_SAFE_CALL",
"USELESS_ELVIS", "RemoveRedundantQualifierName", "LocalVariableName")

package org.partiql.pig.tests.generated

import com.amazon.ionelement.api.*
import org.partiql.pig.runtime.*


abstract class DomainAToDomainBVisitorTransform : DomainVisitorTransformBase() {
    //////////////////////////////////////
    // Tuple Types
    //////////////////////////////////////
    abstract fun transformSumToReplaceWithProduct(node:DomainA.SumToReplaceWithProduct): DomainB.SumToReplaceWithProduct
    abstract fun transformProductA(node:DomainA.ProductA): DomainB.ProductA
    abstract fun transformRecordA(node:DomainA.RecordA): DomainB.RecordA
    // Tuple UnpermutedProduct
    open fun transformUnpermutedProduct(node: DomainA.UnpermutedProduct): DomainB.UnpermutedProduct {
        val new_foo = transformUnpermutedProduct_foo(node)
        val new_bar = transformUnpermutedProduct_bar(node)
        val new_metas = transformUnpermutedProduct_metas(node)
        return DomainB.UnpermutedProduct(
            foo = new_foo,
            bar = new_bar,
            metas = new_metas
        )
    }
    open fun transformUnpermutedProduct_foo(node: DomainA.UnpermutedProduct) =
        transformSymbolPrimitive(node.foo)
    open fun transformUnpermutedProduct_bar(node: DomainA.UnpermutedProduct) =
        transformLongPrimitive(node.bar)
    open fun transformUnpermutedProduct_metas(node: DomainA.UnpermutedProduct) =
        transformMetas(node.metas)

    // Tuple UnpermutedRecord
    open fun transformUnpermutedRecord(node: DomainA.UnpermutedRecord): DomainB.UnpermutedRecord {
        val new_foo = transformUnpermutedRecord_foo(node)
        val new_bar = transformUnpermutedRecord_bar(node)
        val new_metas = transformUnpermutedRecord_metas(node)
        return DomainB.UnpermutedRecord(
            foo = new_foo,
            bar = new_bar,
            metas = new_metas
        )
    }
    open fun transformUnpermutedRecord_foo(node: DomainA.UnpermutedRecord) =
        transformSymbolPrimitive(node.foo)
    open fun transformUnpermutedRecord_bar(node: DomainA.UnpermutedRecord) =
        transformLongPrimitive(node.bar)
    open fun transformUnpermutedRecord_metas(node: DomainA.UnpermutedRecord) =
        transformMetas(node.metas)

    //////////////////////////////////////
    // Sum Type: SumB
    //////////////////////////////////////
    open fun transformSumB(node: DomainA.SumB): DomainB.SumB =
        when(node) {
            is DomainA.SumB.WillBeUnchanged -> transformSumBWillBeUnchanged(node)
            is DomainA.SumB.WillBeRemoved -> transformSumBWillBeRemoved(node)
            is DomainA.SumB.WillBeReplaced -> transformSumBWillBeReplaced(node)
        }
    // Variant SumBWillBeUnchanged
    open fun transformSumBWillBeUnchanged(node: DomainA.SumB.WillBeUnchanged): DomainB.SumB {
        val new_metas = transformSumBWillBeUnchanged_metas(node)
        return DomainB.SumB.WillBeUnchanged(
            metas = new_metas
        )
    }
    open fun transformSumBWillBeUnchanged_metas(node: DomainA.SumB.WillBeUnchanged) =
        transformMetas(node.metas)

    // Variant SumBWillBeRemoved
    abstract fun transformSumBWillBeRemoved(node: DomainA.SumB.WillBeRemoved): DomainB.SumB
    // Variant SumBWillBeReplaced
    abstract fun transformSumBWillBeReplaced(node: DomainA.SumB.WillBeReplaced): DomainB.SumB
    //////////////////////////////////////
    // Sum Type: UnpermutedSum
    //////////////////////////////////////
    open fun transformUnpermutedSum(node: DomainA.UnpermutedSum): DomainB.UnpermutedSum =
        when(node) {
            is DomainA.UnpermutedSum.UnpermutedProductVariant -> transformUnpermutedSumUnpermutedProductVariant(node)
            is DomainA.UnpermutedSum.UnpermutedRecordVariant -> transformUnpermutedSumUnpermutedRecordVariant(node)
        }
    // Variant UnpermutedSumUnpermutedProductVariant
    open fun transformUnpermutedSumUnpermutedProductVariant(node: DomainA.UnpermutedSum.UnpermutedProductVariant): DomainB.UnpermutedSum {
        val new_foo = transformUnpermutedSumUnpermutedProductVariant_foo(node)
        val new_bar = transformUnpermutedSumUnpermutedProductVariant_bar(node)
        val new_metas = transformUnpermutedSumUnpermutedProductVariant_metas(node)
        return DomainB.UnpermutedSum.UnpermutedProductVariant(
            foo = new_foo,
            bar = new_bar,
            metas = new_metas
        )
    }
    open fun transformUnpermutedSumUnpermutedProductVariant_foo(node: DomainA.UnpermutedSum.UnpermutedProductVariant) =
        transformSymbolPrimitive(node.foo)
    open fun transformUnpermutedSumUnpermutedProductVariant_bar(node: DomainA.UnpermutedSum.UnpermutedProductVariant) =
        transformLongPrimitive(node.bar)
    open fun transformUnpermutedSumUnpermutedProductVariant_metas(node: DomainA.UnpermutedSum.UnpermutedProductVariant) =
        transformMetas(node.metas)

    // Variant UnpermutedSumUnpermutedRecordVariant
    open fun transformUnpermutedSumUnpermutedRecordVariant(node: DomainA.UnpermutedSum.UnpermutedRecordVariant): DomainB.UnpermutedSum {
        val new_foo = transformUnpermutedSumUnpermutedRecordVariant_foo(node)
        val new_bar = transformUnpermutedSumUnpermutedRecordVariant_bar(node)
        val new_metas = transformUnpermutedSumUnpermutedRecordVariant_metas(node)
        return DomainB.UnpermutedSum.UnpermutedRecordVariant(
            foo = new_foo,
            bar = new_bar,
            metas = new_metas
        )
    }
    open fun transformUnpermutedSumUnpermutedRecordVariant_foo(node: DomainA.UnpermutedSum.UnpermutedRecordVariant) =
        transformSymbolPrimitive(node.foo)
    open fun transformUnpermutedSumUnpermutedRecordVariant_bar(node: DomainA.UnpermutedSum.UnpermutedRecordVariant) =
        transformLongPrimitive(node.bar)
    open fun transformUnpermutedSumUnpermutedRecordVariant_metas(node: DomainA.UnpermutedSum.UnpermutedRecordVariant) =
        transformMetas(node.metas)

}
