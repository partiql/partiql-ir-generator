
/**
 * This code was generated by the PartiQL I.R. Generator.
 * Do not modify this file.  
 */
@file:Suppress("unused", "MemberVisibilityCanBePrivate", "FunctionName",
"CanBePrimaryConstructorProperty", "UNNECESSARY_SAFE_CALL",
"USELESS_ELVIS", "RemoveRedundantQualifierName", "LocalVariableName")

package org.partiql.pig.tests.generated

import com.amazon.ionelement.api.*
import org.partiql.pig.runtime.*


class MultiWordDomain private constructor() {
    /////////////////////////////////////////////////////////////////////////////
    // Builder
    /////////////////////////////////////////////////////////////////////////////
    companion object {
        @JvmStatic
        fun BUILDER() : Builder = MultiWordDomainBuilder
    
        fun <T: MultiWordDomainNode> build(block: Builder.() -> T) =
            MultiWordDomainBuilder.block()
    
        fun transform(element: AnyElement): MultiWordDomainNode =
            transform(element.asSexp())
    
        fun transform(element: SexpElement): MultiWordDomainNode =
            IonElementTransformer().transform(element)
    }
    
    interface Builder {
        fun newMetaContainer() = emptyMetaContainer()
    
        // Tuples 
        /**
         * Creates an instance of [MultiWordDomain.AaaAaa].
         */
        fun aaaAaa(
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAaa =
            MultiWordDomain.AaaAaa(
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAab].
         */
        fun aaaAab(
            dField: Long? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAab =
            MultiWordDomain.AaaAab(
                dField = dField?.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAab].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAab_(
            dField: org.partiql.pig.runtime.LongPrimitive? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAab =
            MultiWordDomain.AaaAab(
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAac].
         */
        fun aaaAac(
            dField: Long? = null,
            eField: String? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAac =
            MultiWordDomain.AaaAac(
                dField = dField?.asPrimitive(),
                eField = eField?.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAac].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAac_(
            dField: org.partiql.pig.runtime.LongPrimitive? = null,
            eField: org.partiql.pig.runtime.SymbolPrimitive? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAac =
            MultiWordDomain.AaaAac(
                dField = dField,
                eField = eField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAad].
         */
        fun aaaAad(
            dField: kotlin.collections.List<Long> = emptyList(),
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAad =
            MultiWordDomain.AaaAad(
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAad].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAad_(
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = emptyList(),
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAad =
            MultiWordDomain.AaaAad(
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAad].
         */
        fun aaaAad(
            vararg dField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAad =
            MultiWordDomain.AaaAad(
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAad].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAad_(
            vararg dField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAad =
            MultiWordDomain.AaaAad(
                dField = dField.toList(),
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAae].
         */
        fun aaaAae(
            dField: kotlin.collections.List<Long>,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAae =
            MultiWordDomain.AaaAae(
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAae].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAae_(
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAae =
            MultiWordDomain.AaaAae(
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAae].
         */
        fun aaaAae(
            dField0: Long,
            dField1: Long,
            vararg dField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAae =
            MultiWordDomain.AaaAae(
                dField = listOfPrimitives(dField0, dField1) + dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AaaAae].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aaaAae_(
            dField0: org.partiql.pig.runtime.LongPrimitive,
            dField1: org.partiql.pig.runtime.LongPrimitive,
            vararg dField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AaaAae =
            MultiWordDomain.AaaAae(
                dField = listOfPrimitives(dField0, dField1) + dField.toList(),
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AabAaa].
         */
        fun aabAaa(
            bField: Long,
            cField: String,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAaa =
            MultiWordDomain.AabAaa(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAaa].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAaa_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAaa =
            MultiWordDomain.AabAaa(
                bField = bField,
                cField = cField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AabAab].
         */
        fun aabAab(
            bField: Long,
            cField: String,
            dField: Long? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAab =
            MultiWordDomain.AabAab(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = dField?.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAab].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAab_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            dField: org.partiql.pig.runtime.LongPrimitive? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAab =
            MultiWordDomain.AabAab(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AabAac].
         */
        fun aabAac(
            bField: Long,
            cField: String,
            dField: Long? = null,
            eField: String? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAac =
            MultiWordDomain.AabAac(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = dField?.asPrimitive(),
                eField = eField?.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAac].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAac_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            dField: org.partiql.pig.runtime.LongPrimitive? = null,
            eField: org.partiql.pig.runtime.SymbolPrimitive? = null,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAac =
            MultiWordDomain.AabAac(
                bField = bField,
                cField = cField,
                dField = dField,
                eField = eField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AabAad].
         */
        fun aabAad(
            bField: Long,
            cField: String,
            dField: kotlin.collections.List<Long> = emptyList(),
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAad =
            MultiWordDomain.AabAad(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAad].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAad_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = emptyList(),
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAad =
            MultiWordDomain.AabAad(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAad].
         */
        fun aabAad(
            bField: Long,
            cField: String,
            vararg dField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAad =
            MultiWordDomain.AabAad(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAad].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAad_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            vararg dField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAad =
            MultiWordDomain.AabAad(
                bField = bField,
                cField = cField,
                dField = dField.toList(),
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.AabAae].
         */
        fun aabAae(
            bField: Long,
            cField: String,
            dField: kotlin.collections.List<Long>,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAae =
            MultiWordDomain.AabAae(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAae].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAae_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAae =
            MultiWordDomain.AabAae(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAae].
         */
        fun aabAae(
            bField: Long,
            cField: String,
            dField0: Long,
            dField1: Long,
            vararg dField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAae =
            MultiWordDomain.AabAae(
                bField = bField.asPrimitive(),
                cField = cField.asPrimitive(),
                dField = listOfPrimitives(dField0, dField1) + dField.map { it.asPrimitive() },
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.AabAae].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun aabAae_(
            bField: org.partiql.pig.runtime.LongPrimitive,
            cField: org.partiql.pig.runtime.SymbolPrimitive,
            dField0: org.partiql.pig.runtime.LongPrimitive,
            dField1: org.partiql.pig.runtime.LongPrimitive,
            vararg dField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.AabAae =
            MultiWordDomain.AabAae(
                bField = bField,
                cField = cField,
                dField = listOfPrimitives(dField0, dField1) + dField.toList(),
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.Rrr].
         */
        fun rrr(
            aField: Long,
            bbbField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.Rrr =
            MultiWordDomain.Rrr(
                aField = aField.asPrimitive(),
                bbbField = bbbField.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.Rrr].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun rrr_(
            aField: org.partiql.pig.runtime.LongPrimitive,
            bbbField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.Rrr =
            MultiWordDomain.Rrr(
                aField = aField,
                bbbField = bbbField,
                metas = newMetaContainer() + metas
            )
        
        
        // Variants for Sum: SssTtt 
        /**
         * Creates an instance of [MultiWordDomain.SssTtt.Lll].
         */
        fun lll(
            uField: Long,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.SssTtt.Lll =
            MultiWordDomain.SssTtt.Lll(
                uField = uField.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.SssTtt.Lll].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun lll_(
            uField: org.partiql.pig.runtime.LongPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.SssTtt.Lll =
            MultiWordDomain.SssTtt.Lll(
                uField = uField,
                metas = newMetaContainer() + metas
            )
        
        
        /**
         * Creates an instance of [MultiWordDomain.SssTtt.Mmm].
         */
        fun mmm(
            vField: String,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.SssTtt.Mmm =
            MultiWordDomain.SssTtt.Mmm(
                vField = vField.asPrimitive(),
                metas = newMetaContainer() + metas
            )
        
        /**
         * Creates an instance of [MultiWordDomain.SssTtt.Mmm].
         *
         * Use this variant when metas must be passed to primitive child elements.
         *
         * (The "_" suffix is needed to work-around conflicts due to type erasure and ambiguities with null arguments.)
         */
        fun mmm_(
            vField: org.partiql.pig.runtime.SymbolPrimitive,
            metas: MetaContainer = emptyMetaContainer()
        ): MultiWordDomain.SssTtt.Mmm =
            MultiWordDomain.SssTtt.Mmm(
                vField = vField,
                metas = newMetaContainer() + metas
            )
    }
    
    /** Default implementation of [Builder] that uses all default method implementations. */
    private object MultiWordDomainBuilder : Builder
    
    /** Base class for all MultiWordDomain types. */
    abstract class MultiWordDomainNode : DomainNode {
        abstract override fun copy(metas: MetaContainer): MultiWordDomainNode
        override fun toString() = toIonElement().toString()
        abstract override fun withMeta(metaKey: String, metaValue: Any): MultiWordDomainNode
        abstract override fun toIonElement(): SexpElement
    }
    
    
    /////////////////////////////////////////////////////////////////////////////
    // Tuple Types
    /////////////////////////////////////////////////////////////////////////////
    class AaaAaa(
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AaaAaa =
            AaaAaa(
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AaaAaa =
            AaaAaa(
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aaa_aaa"),
                metas = metas)
            return elements
        }
    
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AaaAaa::class.java) return false
    
            return true
        }
    
        override fun hashCode(): Int = 0
    }
    
    class AaaAab(
        val dField: org.partiql.pig.runtime.LongPrimitive?,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AaaAab =
            AaaAab(
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AaaAab =
            AaaAab(
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aaa_aab"),
                dField?.toIonElement() ?: ionNull(),
                metas = metas)
            return elements
        }
    
        fun copy(
            dField: org.partiql.pig.runtime.LongPrimitive? = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AaaAab(
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AaaAab::class.java) return false
    
            other as AaaAab
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AaaAac(
        val dField: org.partiql.pig.runtime.LongPrimitive?,
        val eField: org.partiql.pig.runtime.SymbolPrimitive?,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AaaAac =
            AaaAac(
                dField = dField,
                eField = eField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AaaAac =
            AaaAac(
                dField = dField,
                eField = eField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aaa_aac"),
                dField?.toIonElement() ?: ionNull(),
                eField?.toIonElement() ?: ionNull(),
                metas = metas)
            return elements
        }
    
        fun copy(
            dField: org.partiql.pig.runtime.LongPrimitive? = this.dField,
            eField: org.partiql.pig.runtime.SymbolPrimitive? = this.eField,
            metas: MetaContainer = this.metas
        ) =
            AaaAac(
                dField,
                eField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AaaAac::class.java) return false
    
            other as AaaAac
            if (dField != other.dField) return false
            if (eField != other.eField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = dField.hashCode()
            hc = 31 * hc + eField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AaaAad(
        val dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AaaAad =
            AaaAad(
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AaaAad =
            AaaAad(
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aaa_aad"),
                *dField.map { it.toIonElement() }.toTypedArray(),
                metas = metas)
            return elements
        }
    
        fun copy(
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AaaAad(
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AaaAad::class.java) return false
    
            other as AaaAad
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AaaAae(
        val dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AaaAae =
            AaaAae(
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AaaAae =
            AaaAae(
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aaa_aae"),
                *dField.map { it.toIonElement() }.toTypedArray(),
                metas = metas)
            return elements
        }
    
        fun copy(
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AaaAae(
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AaaAae::class.java) return false
    
            other as AaaAae
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AabAaa(
        val bField: org.partiql.pig.runtime.LongPrimitive,
        val cField: org.partiql.pig.runtime.SymbolPrimitive,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AabAaa =
            AabAaa(
                bField = bField,
                cField = cField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AabAaa =
            AabAaa(
                bField = bField,
                cField = cField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aab_aaa"),
                bField.toIonElement(),
                cField.toIonElement(),
                metas = metas)
            return elements
        }
    
        fun copy(
            bField: org.partiql.pig.runtime.LongPrimitive = this.bField,
            cField: org.partiql.pig.runtime.SymbolPrimitive = this.cField,
            metas: MetaContainer = this.metas
        ) =
            AabAaa(
                bField,
                cField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AabAaa::class.java) return false
    
            other as AabAaa
            if (bField != other.bField) return false
            if (cField != other.cField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = bField.hashCode()
            hc = 31 * hc + cField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AabAab(
        val bField: org.partiql.pig.runtime.LongPrimitive,
        val cField: org.partiql.pig.runtime.SymbolPrimitive,
        val dField: org.partiql.pig.runtime.LongPrimitive?,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AabAab =
            AabAab(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AabAab =
            AabAab(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aab_aab"),
                bField.toIonElement(),
                cField.toIonElement(),
                dField?.toIonElement() ?: ionNull(),
                metas = metas)
            return elements
        }
    
        fun copy(
            bField: org.partiql.pig.runtime.LongPrimitive = this.bField,
            cField: org.partiql.pig.runtime.SymbolPrimitive = this.cField,
            dField: org.partiql.pig.runtime.LongPrimitive? = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AabAab(
                bField,
                cField,
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AabAab::class.java) return false
    
            other as AabAab
            if (bField != other.bField) return false
            if (cField != other.cField) return false
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = bField.hashCode()
            hc = 31 * hc + cField.hashCode()
            hc = 31 * hc + dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AabAac(
        val bField: org.partiql.pig.runtime.LongPrimitive,
        val cField: org.partiql.pig.runtime.SymbolPrimitive,
        val dField: org.partiql.pig.runtime.LongPrimitive?,
        val eField: org.partiql.pig.runtime.SymbolPrimitive?,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AabAac =
            AabAac(
                bField = bField,
                cField = cField,
                dField = dField,
                eField = eField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AabAac =
            AabAac(
                bField = bField,
                cField = cField,
                dField = dField,
                eField = eField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aab_aac"),
                bField.toIonElement(),
                cField.toIonElement(),
                dField?.toIonElement() ?: ionNull(),
                eField?.toIonElement() ?: ionNull(),
                metas = metas)
            return elements
        }
    
        fun copy(
            bField: org.partiql.pig.runtime.LongPrimitive = this.bField,
            cField: org.partiql.pig.runtime.SymbolPrimitive = this.cField,
            dField: org.partiql.pig.runtime.LongPrimitive? = this.dField,
            eField: org.partiql.pig.runtime.SymbolPrimitive? = this.eField,
            metas: MetaContainer = this.metas
        ) =
            AabAac(
                bField,
                cField,
                dField,
                eField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AabAac::class.java) return false
    
            other as AabAac
            if (bField != other.bField) return false
            if (cField != other.cField) return false
            if (dField != other.dField) return false
            if (eField != other.eField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = bField.hashCode()
            hc = 31 * hc + cField.hashCode()
            hc = 31 * hc + dField.hashCode()
            hc = 31 * hc + eField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AabAad(
        val bField: org.partiql.pig.runtime.LongPrimitive,
        val cField: org.partiql.pig.runtime.SymbolPrimitive,
        val dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AabAad =
            AabAad(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AabAad =
            AabAad(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aab_aad"),
                bField.toIonElement(),
                cField.toIonElement(),
                *dField.map { it.toIonElement() }.toTypedArray(),
                metas = metas)
            return elements
        }
    
        fun copy(
            bField: org.partiql.pig.runtime.LongPrimitive = this.bField,
            cField: org.partiql.pig.runtime.SymbolPrimitive = this.cField,
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AabAad(
                bField,
                cField,
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AabAad::class.java) return false
    
            other as AabAad
            if (bField != other.bField) return false
            if (cField != other.cField) return false
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = bField.hashCode()
            hc = 31 * hc + cField.hashCode()
            hc = 31 * hc + dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class AabAae(
        val bField: org.partiql.pig.runtime.LongPrimitive,
        val cField: org.partiql.pig.runtime.SymbolPrimitive,
        val dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive>,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): AabAae =
            AabAae(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): AabAae =
            AabAae(
                bField = bField,
                cField = cField,
                dField = dField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = ionSexpOf(
                ionSymbol("aab_aae"),
                bField.toIonElement(),
                cField.toIonElement(),
                *dField.map { it.toIonElement() }.toTypedArray(),
                metas = metas)
            return elements
        }
    
        fun copy(
            bField: org.partiql.pig.runtime.LongPrimitive = this.bField,
            cField: org.partiql.pig.runtime.SymbolPrimitive = this.cField,
            dField: kotlin.collections.List<org.partiql.pig.runtime.LongPrimitive> = this.dField,
            metas: MetaContainer = this.metas
        ) =
            AabAae(
                bField,
                cField,
                dField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != AabAae::class.java) return false
    
            other as AabAae
            if (bField != other.bField) return false
            if (cField != other.cField) return false
            if (dField != other.dField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = bField.hashCode()
            hc = 31 * hc + cField.hashCode()
            hc = 31 * hc + dField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    class Rrr(
        val aField: org.partiql.pig.runtime.LongPrimitive,
        val bbbField: org.partiql.pig.runtime.LongPrimitive,
        override val metas: MetaContainer = emptyMetaContainer()
    ): MultiWordDomainNode() {
    
        override fun copy(metas: MetaContainer): Rrr =
            Rrr(
                aField = aField,
                bbbField = bbbField,
                metas = metas)
    
        override fun withMeta(metaKey: String, metaValue: Any): Rrr =
            Rrr(
                aField = aField,
                bbbField = bbbField,
                metas = metas + metaContainerOf(metaKey to metaValue))
    
        override fun toIonElement(): SexpElement {
            val elements = listOfNotNull(
                ionSymbol("rrr"),
                ionSexpOf(ionSymbol("a_field"), aField.toIonElement()),
                ionSexpOf(ionSymbol("b_field"), bbbField.toIonElement())
            )
    
            return ionSexpOf(elements, metas = metas)
        }
    
        fun copy(
            aField: org.partiql.pig.runtime.LongPrimitive = this.aField,
            bbbField: org.partiql.pig.runtime.LongPrimitive = this.bbbField,
            metas: MetaContainer = this.metas
        ) =
            Rrr(
                aField,
                bbbField,
                metas)
    
        override fun equals(other: Any?): Boolean {
            if (other == null) return false
            if (this === other) return true
            if (other.javaClass != Rrr::class.java) return false
    
            other as Rrr
            if (aField != other.aField) return false
            if (bbbField != other.bbbField) return false
            return true
        }
    
        private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
            var hc = aField.hashCode()
            hc = 31 * hc + bbbField.hashCode()
            hc
        }
    
        override fun hashCode(): Int = myHashCode
    }
    
    
    /////////////////////////////////////////////////////////////////////////////
    // Sum Types
    /////////////////////////////////////////////////////////////////////////////
    
    sealed class SssTtt(override val metas: MetaContainer = emptyMetaContainer()) : MultiWordDomainNode() {
        override fun copy(metas: MetaContainer): SssTtt =
            when (this) {
                is Lll -> copy(metas = metas)
                is Mmm -> copy(metas = metas)
            }
    
        class Lll(
            val uField: org.partiql.pig.runtime.LongPrimitive,
            override val metas: MetaContainer = emptyMetaContainer()
        ): SssTtt() {
        
            override fun copy(metas: MetaContainer): Lll =
                Lll(
                    uField = uField,
                    metas = metas)
        
            override fun withMeta(metaKey: String, metaValue: Any): Lll =
                Lll(
                    uField = uField,
                    metas = metas + metaContainerOf(metaKey to metaValue))
        
            override fun toIonElement(): SexpElement {
                val elements = ionSexpOf(
                    ionSymbol("lll"),
                    uField.toIonElement(),
                    metas = metas)
                return elements
            }
        
            fun copy(
                uField: org.partiql.pig.runtime.LongPrimitive = this.uField,
                metas: MetaContainer = this.metas
            ) =
                Lll(
                    uField,
                    metas)
        
            override fun equals(other: Any?): Boolean {
                if (other == null) return false
                if (this === other) return true
                if (other.javaClass != Lll::class.java) return false
        
                other as Lll
                if (uField != other.uField) return false
                return true
            }
        
            private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
                var hc = uField.hashCode()
                hc
            }
        
            override fun hashCode(): Int = myHashCode
        }
    
        class Mmm(
            val vField: org.partiql.pig.runtime.SymbolPrimitive,
            override val metas: MetaContainer = emptyMetaContainer()
        ): SssTtt() {
        
            override fun copy(metas: MetaContainer): Mmm =
                Mmm(
                    vField = vField,
                    metas = metas)
        
            override fun withMeta(metaKey: String, metaValue: Any): Mmm =
                Mmm(
                    vField = vField,
                    metas = metas + metaContainerOf(metaKey to metaValue))
        
            override fun toIonElement(): SexpElement {
                val elements = ionSexpOf(
                    ionSymbol("mmm"),
                    vField.toIonElement(),
                    metas = metas)
                return elements
            }
        
            fun copy(
                vField: org.partiql.pig.runtime.SymbolPrimitive = this.vField,
                metas: MetaContainer = this.metas
            ) =
                Mmm(
                    vField,
                    metas)
        
            override fun equals(other: Any?): Boolean {
                if (other == null) return false
                if (this === other) return true
                if (other.javaClass != Mmm::class.java) return false
        
                other as Mmm
                if (vField != other.vField) return false
                return true
            }
        
            private val myHashCode by lazy(LazyThreadSafetyMode.PUBLICATION) {
                var hc = vField.hashCode()
                hc
            }
        
            override fun hashCode(): Int = myHashCode
        }
    
        /** Converts instances of [MultiWordDomain.SssTtt] to any [T]. */
        interface Converter<T> {
            fun convert(node: MultiWordDomain.SssTtt): T = when(node) {
                is MultiWordDomain.SssTtt.Lll -> convertLll(node)
                is MultiWordDomain.SssTtt.Mmm -> convertMmm(node)
            }
    
            fun convertLll(node: MultiWordDomain.SssTtt.Lll): T
            fun convertMmm(node: MultiWordDomain.SssTtt.Mmm): T
        }
    }
    
    /////////////////////////////////////////////////////////////////////////////
    // IonElementTransformer
    /////////////////////////////////////////////////////////////////////////////
    
    
    private class IonElementTransformer : IonElementTransformerBase<MultiWordDomainNode>() {
    
        override fun innerTransform(sexp: SexpElement): MultiWordDomainNode {
            return when(sexp.tag) {
                //////////////////////////////////////
                // Tuple Types
                //////////////////////////////////////
                "aaa_aaa" -> {
                    sexp.requireArityOrMalformed(IntRange(0, 0))
                    MultiWordDomain.AaaAaa(
                        metas = sexp.metas)
                }
                "aaa_aab" -> {
                    sexp.requireArityOrMalformed(IntRange(0, 1))
                    val dField = sexp.getOptional(0)?.toLongPrimitive()
                    MultiWordDomain.AaaAab(
                        dField,
                        metas = sexp.metas)
                }
                "aaa_aac" -> {
                    sexp.requireArityOrMalformed(IntRange(0, 2))
                    val dField = sexp.getOptional(0)?.toLongPrimitive()
                    val eField = sexp.getOptional(1)?.toSymbolPrimitive()
                    MultiWordDomain.AaaAac(
                        dField,
                        eField,
                        metas = sexp.metas)
                }
                "aaa_aad" -> {
                    sexp.requireArityOrMalformed(IntRange(0, 2147483647))
                    val dField = sexp.values.drop(1).map { it.toLongPrimitive() }
                    MultiWordDomain.AaaAad(
                        dField,
                        metas = sexp.metas)
                }
                "aaa_aae" -> {
                    sexp.requireArityOrMalformed(IntRange(0, 2147483647))
                    val dField = sexp.values.drop(1).map { it.toLongPrimitive() }
                    MultiWordDomain.AaaAae(
                        dField,
                        metas = sexp.metas)
                }
                "aab_aaa" -> {
                    sexp.requireArityOrMalformed(IntRange(2, 2))
                    val bField = sexp.getRequired(0).toLongPrimitive()
                    val cField = sexp.getRequired(1).toSymbolPrimitive()
                    MultiWordDomain.AabAaa(
                        bField,
                        cField,
                        metas = sexp.metas)
                }
                "aab_aab" -> {
                    sexp.requireArityOrMalformed(IntRange(2, 3))
                    val bField = sexp.getRequired(0).toLongPrimitive()
                    val cField = sexp.getRequired(1).toSymbolPrimitive()
                    val dField = sexp.getOptional(2)?.toLongPrimitive()
                    MultiWordDomain.AabAab(
                        bField,
                        cField,
                        dField,
                        metas = sexp.metas)
                }
                "aab_aac" -> {
                    sexp.requireArityOrMalformed(IntRange(2, 4))
                    val bField = sexp.getRequired(0).toLongPrimitive()
                    val cField = sexp.getRequired(1).toSymbolPrimitive()
                    val dField = sexp.getOptional(2)?.toLongPrimitive()
                    val eField = sexp.getOptional(3)?.toSymbolPrimitive()
                    MultiWordDomain.AabAac(
                        bField,
                        cField,
                        dField,
                        eField,
                        metas = sexp.metas)
                }
                "aab_aad" -> {
                    sexp.requireArityOrMalformed(IntRange(2, 2147483647))
                    val bField = sexp.getRequired(0).toLongPrimitive()
                    val cField = sexp.getRequired(1).toSymbolPrimitive()
                    val dField = sexp.values.drop(3).map { it.toLongPrimitive() }
                    MultiWordDomain.AabAad(
                        bField,
                        cField,
                        dField,
                        metas = sexp.metas)
                }
                "aab_aae" -> {
                    sexp.requireArityOrMalformed(IntRange(2, 2147483647))
                    val bField = sexp.getRequired(0).toLongPrimitive()
                    val cField = sexp.getRequired(1).toSymbolPrimitive()
                    val dField = sexp.values.drop(3).map { it.toLongPrimitive() }
                    MultiWordDomain.AabAae(
                        bField,
                        cField,
                        dField,
                        metas = sexp.metas)
                }
                "rrr" -> {
                    val ir = sexp.transformToIntermediateRecord()
            
                    val aField = ir.processRequiredField("a_field") { it.toLongPrimitive() }
                    val bbbField = ir.processRequiredField("bbb_field") { it.toLongPrimitive() }
            
                    ir.malformedIfAnyUnprocessedFieldsRemain()
            
                    Rrr(aField, bbbField, metas = sexp.metas)
                }
                //////////////////////////////////////
                // Variants for Sum Type 'SssTtt'
                //////////////////////////////////////
                "lll" -> {
                    sexp.requireArityOrMalformed(IntRange(1, 1))
                    val uField = sexp.getRequired(0).toLongPrimitive()
                    MultiWordDomain.SssTtt.Lll(
                        uField,
                        metas = sexp.metas)
                }
                "mmm" -> {
                    sexp.requireArityOrMalformed(IntRange(1, 1))
                    val vField = sexp.getRequired(0).toSymbolPrimitive()
                    MultiWordDomain.SssTtt.Mmm(
                        vField,
                        metas = sexp.metas)
                }
                else -> errMalformed(sexp.head.metas.location, "Unknown tag '${sexp.tag}' for domain 'multi_word_domain'")
            }
        }
    }
    
    open class Visitor : DomainVisitorBase() {
        ////////////////////////////////////////////////////////////////////////////
        // Visit Functions
        ////////////////////////////////////////////////////////////////////////////
    
        //////////////////////////////////////
        // Tuple Types
        //////////////////////////////////////
        open fun visitAaaAaa(node: MultiWordDomain.AaaAaa) { }
        open fun visitAaaAab(node: MultiWordDomain.AaaAab) { }
        open fun visitAaaAac(node: MultiWordDomain.AaaAac) { }
        open fun visitAaaAad(node: MultiWordDomain.AaaAad) { }
        open fun visitAaaAae(node: MultiWordDomain.AaaAae) { }
        open fun visitAabAaa(node: MultiWordDomain.AabAaa) { }
        open fun visitAabAab(node: MultiWordDomain.AabAab) { }
        open fun visitAabAac(node: MultiWordDomain.AabAac) { }
        open fun visitAabAad(node: MultiWordDomain.AabAad) { }
        open fun visitAabAae(node: MultiWordDomain.AabAae) { }
        open fun visitRrr(node: MultiWordDomain.Rrr) { }
        //////////////////////////////////////
        // Sum Type: SssTtt
        //////////////////////////////////////
        protected open fun visitSssTtt(node: MultiWordDomain.SssTtt) { }
        protected open fun visitSssTttLll(node: MultiWordDomain.SssTtt.Lll) { }
        protected open fun visitSssTttMmm(node: MultiWordDomain.SssTtt.Mmm) { }
    
        ////////////////////////////////////////////////////////////////////////////
        // Walk Functions
        ////////////////////////////////////////////////////////////////////////////
    
        //////////////////////////////////////
        // Tuple Types
        //////////////////////////////////////
        open fun walkAaaAaa(node: MultiWordDomain.AaaAaa) {
            visitAaaAaa(node)
            walkMetas(node.metas)
        }
        open fun walkAaaAab(node: MultiWordDomain.AaaAab) {
            visitAaaAab(node)
            node.dField?.let { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAaaAac(node: MultiWordDomain.AaaAac) {
            visitAaaAac(node)
            node.dField?.let { walkLongPrimitive(it) }
            node.eField?.let { walkSymbolPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAaaAad(node: MultiWordDomain.AaaAad) {
            visitAaaAad(node)
            node.dField.map { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAaaAae(node: MultiWordDomain.AaaAae) {
            visitAaaAae(node)
            node.dField.map { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAabAaa(node: MultiWordDomain.AabAaa) {
            visitAabAaa(node)
            walkLongPrimitive(node.bField)
            walkSymbolPrimitive(node.cField)
            walkMetas(node.metas)
        }
        open fun walkAabAab(node: MultiWordDomain.AabAab) {
            visitAabAab(node)
            walkLongPrimitive(node.bField)
            walkSymbolPrimitive(node.cField)
            node.dField?.let { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAabAac(node: MultiWordDomain.AabAac) {
            visitAabAac(node)
            walkLongPrimitive(node.bField)
            walkSymbolPrimitive(node.cField)
            node.dField?.let { walkLongPrimitive(it) }
            node.eField?.let { walkSymbolPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAabAad(node: MultiWordDomain.AabAad) {
            visitAabAad(node)
            walkLongPrimitive(node.bField)
            walkSymbolPrimitive(node.cField)
            node.dField.map { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkAabAae(node: MultiWordDomain.AabAae) {
            visitAabAae(node)
            walkLongPrimitive(node.bField)
            walkSymbolPrimitive(node.cField)
            node.dField.map { walkLongPrimitive(it) }
            walkMetas(node.metas)
        }
        open fun walkRrr(node: MultiWordDomain.Rrr) {
            visitRrr(node)
            walkLongPrimitive(node.aField)
            walkLongPrimitive(node.bbbField)
            walkMetas(node.metas)
        }
        //////////////////////////////////////
        // Sum Type: SssTtt
        //////////////////////////////////////
        open fun walkSssTtt(node: MultiWordDomain.SssTtt) {
            visitSssTtt(node)
            when(node) {
                is MultiWordDomain.SssTtt.Lll -> walkSssTttLll(node)
                is MultiWordDomain.SssTtt.Mmm -> walkSssTttMmm(node)
            }
        }
    
        open fun walkSssTttLll(node: MultiWordDomain.SssTtt.Lll) {
            visitSssTttLll(node)
            walkLongPrimitive(node.uField)
            walkMetas(node.metas)
        }
        open fun walkSssTttMmm(node: MultiWordDomain.SssTtt.Mmm) {
            visitSssTttMmm(node)
            walkSymbolPrimitive(node.vField)
            walkMetas(node.metas)
        }
    }
    open class VisitorFold<T> : DomainVisitorFoldBase<T>() {
        ////////////////////////////////////////////////////////////////////////////
        // Visit Functions
        ////////////////////////////////////////////////////////////////////////////
    
        //////////////////////////////////////
        // Tuple Types
        //////////////////////////////////////
        open protected fun visitAaaAaa(node: MultiWordDomain.AaaAaa, accumulator: T): T = accumulator
        open protected fun visitAaaAab(node: MultiWordDomain.AaaAab, accumulator: T): T = accumulator
        open protected fun visitAaaAac(node: MultiWordDomain.AaaAac, accumulator: T): T = accumulator
        open protected fun visitAaaAad(node: MultiWordDomain.AaaAad, accumulator: T): T = accumulator
        open protected fun visitAaaAae(node: MultiWordDomain.AaaAae, accumulator: T): T = accumulator
        open protected fun visitAabAaa(node: MultiWordDomain.AabAaa, accumulator: T): T = accumulator
        open protected fun visitAabAab(node: MultiWordDomain.AabAab, accumulator: T): T = accumulator
        open protected fun visitAabAac(node: MultiWordDomain.AabAac, accumulator: T): T = accumulator
        open protected fun visitAabAad(node: MultiWordDomain.AabAad, accumulator: T): T = accumulator
        open protected fun visitAabAae(node: MultiWordDomain.AabAae, accumulator: T): T = accumulator
        open protected fun visitRrr(node: MultiWordDomain.Rrr, accumulator: T): T = accumulator
        //////////////////////////////////////
        // Sum Type: SssTtt
        //////////////////////////////////////
        open protected fun visitSssTtt(node: MultiWordDomain.SssTtt, accumulator: T): T = accumulator
        open protected fun visitSssTttLll(node: MultiWordDomain.SssTtt.Lll, accumulator: T): T = accumulator
        open protected fun visitSssTttMmm(node: MultiWordDomain.SssTtt.Mmm, accumulator: T): T = accumulator
    
        ////////////////////////////////////////////////////////////////////////////
        // Walk Functions
        ////////////////////////////////////////////////////////////////////////////
    
        //////////////////////////////////////
        // Tuple Types
        //////////////////////////////////////
        open fun walkAaaAaa(node: MultiWordDomain.AaaAaa, accumulator: T): T {
            var current = accumulator
            current = visitAaaAaa(node, current)
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAaaAab(node: MultiWordDomain.AaaAab, accumulator: T): T {
            var current = accumulator
            current = visitAaaAab(node, current)
            node.dField?.let { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAaaAac(node: MultiWordDomain.AaaAac, accumulator: T): T {
            var current = accumulator
            current = visitAaaAac(node, current)
            node.dField?.let { current = walkLongPrimitive(it, current) }
            node.eField?.let { current = walkSymbolPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAaaAad(node: MultiWordDomain.AaaAad, accumulator: T): T {
            var current = accumulator
            current = visitAaaAad(node, current)
            node.dField.map { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAaaAae(node: MultiWordDomain.AaaAae, accumulator: T): T {
            var current = accumulator
            current = visitAaaAae(node, current)
            node.dField.map { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAabAaa(node: MultiWordDomain.AabAaa, accumulator: T): T {
            var current = accumulator
            current = visitAabAaa(node, current)
            current = walkLongPrimitive(node.bField, current)
            current = walkSymbolPrimitive(node.cField, current)
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAabAab(node: MultiWordDomain.AabAab, accumulator: T): T {
            var current = accumulator
            current = visitAabAab(node, current)
            current = walkLongPrimitive(node.bField, current)
            current = walkSymbolPrimitive(node.cField, current)
            node.dField?.let { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAabAac(node: MultiWordDomain.AabAac, accumulator: T): T {
            var current = accumulator
            current = visitAabAac(node, current)
            current = walkLongPrimitive(node.bField, current)
            current = walkSymbolPrimitive(node.cField, current)
            node.dField?.let { current = walkLongPrimitive(it, current) }
            node.eField?.let { current = walkSymbolPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAabAad(node: MultiWordDomain.AabAad, accumulator: T): T {
            var current = accumulator
            current = visitAabAad(node, current)
            current = walkLongPrimitive(node.bField, current)
            current = walkSymbolPrimitive(node.cField, current)
            node.dField.map { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkAabAae(node: MultiWordDomain.AabAae, accumulator: T): T {
            var current = accumulator
            current = visitAabAae(node, current)
            current = walkLongPrimitive(node.bField, current)
            current = walkSymbolPrimitive(node.cField, current)
            node.dField.map { current = walkLongPrimitive(it, current) }
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkRrr(node: MultiWordDomain.Rrr, accumulator: T): T {
            var current = accumulator
            current = visitRrr(node, current)
            current = walkLongPrimitive(node.aField, current)
            current = walkLongPrimitive(node.bbbField, current)
            current = walkMetas(node.metas, current)
            return current
        }
    
        //////////////////////////////////////
        // Sum Type: SssTtt
        //////////////////////////////////////
        open fun walkSssTtt(node: MultiWordDomain.SssTtt, accumulator: T): T {
            val current = visitSssTtt(node, accumulator)
            return when(node) {
                is MultiWordDomain.SssTtt.Lll -> walkSssTttLll(node, current)
                is MultiWordDomain.SssTtt.Mmm -> walkSssTttMmm(node, current)
            }
        }
    
        open fun walkSssTttLll(node: MultiWordDomain.SssTtt.Lll, accumulator: T): T {
            var current = accumulator
            current = visitSssTttLll(node, current)
            current = walkLongPrimitive(node.uField, current)
            current = walkMetas(node.metas, current)
            return current
        }
    
        open fun walkSssTttMmm(node: MultiWordDomain.SssTtt.Mmm, accumulator: T): T {
            var current = accumulator
            current = visitSssTttMmm(node, current)
            current = walkSymbolPrimitive(node.vField, current)
            current = walkMetas(node.metas, current)
            return current
        }
    
    }
    abstract class VisitorTransform : DomainVisitorTransformBase() {
        //////////////////////////////////////
        // Tuple Types
        //////////////////////////////////////
        // Tuple AaaAaa
        open fun transformAaaAaa(node: MultiWordDomain.AaaAaa): MultiWordDomain.AaaAaa {
            val new_metas = transformAaaAaa_metas(node)
            return if (
                node.metas !== new_metas
            ) {
                MultiWordDomain.AaaAaa(
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAaaAaa_metas(node: MultiWordDomain.AaaAaa) =
            transformMetas(node.metas)
    
        // Tuple AaaAab
        open fun transformAaaAab(node: MultiWordDomain.AaaAab): MultiWordDomain.AaaAab {
            val new_dField = transformAaaAab_dField(node)
            val new_metas = transformAaaAab_metas(node)
            return if (
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AaaAab(
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAaaAab_dField(node: MultiWordDomain.AaaAab) =
            node.dField?.let { transformLongPrimitive(it) }
        open fun transformAaaAab_metas(node: MultiWordDomain.AaaAab) =
            transformMetas(node.metas)
    
        // Tuple AaaAac
        open fun transformAaaAac(node: MultiWordDomain.AaaAac): MultiWordDomain.AaaAac {
            val new_dField = transformAaaAac_dField(node)
            val new_eField = transformAaaAac_eField(node)
            val new_metas = transformAaaAac_metas(node)
            return if (
                node.dField !== new_dField ||
                node.eField !== new_eField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AaaAac(
                    dField = new_dField,
                    eField = new_eField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAaaAac_dField(node: MultiWordDomain.AaaAac) =
            node.dField?.let { transformLongPrimitive(it) }
        open fun transformAaaAac_eField(node: MultiWordDomain.AaaAac) =
            node.eField?.let { transformSymbolPrimitive(it) }
        open fun transformAaaAac_metas(node: MultiWordDomain.AaaAac) =
            transformMetas(node.metas)
    
        // Tuple AaaAad
        open fun transformAaaAad(node: MultiWordDomain.AaaAad): MultiWordDomain.AaaAad {
            val new_dField = transformAaaAad_dField(node)
            val new_metas = transformAaaAad_metas(node)
            return if (
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AaaAad(
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAaaAad_dField(node: MultiWordDomain.AaaAad) =
            node.dField.map { transformLongPrimitive(it) }
        open fun transformAaaAad_metas(node: MultiWordDomain.AaaAad) =
            transformMetas(node.metas)
    
        // Tuple AaaAae
        open fun transformAaaAae(node: MultiWordDomain.AaaAae): MultiWordDomain.AaaAae {
            val new_dField = transformAaaAae_dField(node)
            val new_metas = transformAaaAae_metas(node)
            return if (
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AaaAae(
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAaaAae_dField(node: MultiWordDomain.AaaAae) =
            node.dField.map { transformLongPrimitive(it) }
        open fun transformAaaAae_metas(node: MultiWordDomain.AaaAae) =
            transformMetas(node.metas)
    
        // Tuple AabAaa
        open fun transformAabAaa(node: MultiWordDomain.AabAaa): MultiWordDomain.AabAaa {
            val new_bField = transformAabAaa_bField(node)
            val new_cField = transformAabAaa_cField(node)
            val new_metas = transformAabAaa_metas(node)
            return if (
                node.bField !== new_bField ||
                node.cField !== new_cField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AabAaa(
                    bField = new_bField,
                    cField = new_cField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAabAaa_bField(node: MultiWordDomain.AabAaa) =
            transformLongPrimitive(node.bField)
        open fun transformAabAaa_cField(node: MultiWordDomain.AabAaa) =
            transformSymbolPrimitive(node.cField)
        open fun transformAabAaa_metas(node: MultiWordDomain.AabAaa) =
            transformMetas(node.metas)
    
        // Tuple AabAab
        open fun transformAabAab(node: MultiWordDomain.AabAab): MultiWordDomain.AabAab {
            val new_bField = transformAabAab_bField(node)
            val new_cField = transformAabAab_cField(node)
            val new_dField = transformAabAab_dField(node)
            val new_metas = transformAabAab_metas(node)
            return if (
                node.bField !== new_bField ||
                node.cField !== new_cField ||
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AabAab(
                    bField = new_bField,
                    cField = new_cField,
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAabAab_bField(node: MultiWordDomain.AabAab) =
            transformLongPrimitive(node.bField)
        open fun transformAabAab_cField(node: MultiWordDomain.AabAab) =
            transformSymbolPrimitive(node.cField)
        open fun transformAabAab_dField(node: MultiWordDomain.AabAab) =
            node.dField?.let { transformLongPrimitive(it) }
        open fun transformAabAab_metas(node: MultiWordDomain.AabAab) =
            transformMetas(node.metas)
    
        // Tuple AabAac
        open fun transformAabAac(node: MultiWordDomain.AabAac): MultiWordDomain.AabAac {
            val new_bField = transformAabAac_bField(node)
            val new_cField = transformAabAac_cField(node)
            val new_dField = transformAabAac_dField(node)
            val new_eField = transformAabAac_eField(node)
            val new_metas = transformAabAac_metas(node)
            return if (
                node.bField !== new_bField ||
                node.cField !== new_cField ||
                node.dField !== new_dField ||
                node.eField !== new_eField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AabAac(
                    bField = new_bField,
                    cField = new_cField,
                    dField = new_dField,
                    eField = new_eField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAabAac_bField(node: MultiWordDomain.AabAac) =
            transformLongPrimitive(node.bField)
        open fun transformAabAac_cField(node: MultiWordDomain.AabAac) =
            transformSymbolPrimitive(node.cField)
        open fun transformAabAac_dField(node: MultiWordDomain.AabAac) =
            node.dField?.let { transformLongPrimitive(it) }
        open fun transformAabAac_eField(node: MultiWordDomain.AabAac) =
            node.eField?.let { transformSymbolPrimitive(it) }
        open fun transformAabAac_metas(node: MultiWordDomain.AabAac) =
            transformMetas(node.metas)
    
        // Tuple AabAad
        open fun transformAabAad(node: MultiWordDomain.AabAad): MultiWordDomain.AabAad {
            val new_bField = transformAabAad_bField(node)
            val new_cField = transformAabAad_cField(node)
            val new_dField = transformAabAad_dField(node)
            val new_metas = transformAabAad_metas(node)
            return if (
                node.bField !== new_bField ||
                node.cField !== new_cField ||
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AabAad(
                    bField = new_bField,
                    cField = new_cField,
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAabAad_bField(node: MultiWordDomain.AabAad) =
            transformLongPrimitive(node.bField)
        open fun transformAabAad_cField(node: MultiWordDomain.AabAad) =
            transformSymbolPrimitive(node.cField)
        open fun transformAabAad_dField(node: MultiWordDomain.AabAad) =
            node.dField.map { transformLongPrimitive(it) }
        open fun transformAabAad_metas(node: MultiWordDomain.AabAad) =
            transformMetas(node.metas)
    
        // Tuple AabAae
        open fun transformAabAae(node: MultiWordDomain.AabAae): MultiWordDomain.AabAae {
            val new_bField = transformAabAae_bField(node)
            val new_cField = transformAabAae_cField(node)
            val new_dField = transformAabAae_dField(node)
            val new_metas = transformAabAae_metas(node)
            return if (
                node.bField !== new_bField ||
                node.cField !== new_cField ||
                node.dField !== new_dField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.AabAae(
                    bField = new_bField,
                    cField = new_cField,
                    dField = new_dField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformAabAae_bField(node: MultiWordDomain.AabAae) =
            transformLongPrimitive(node.bField)
        open fun transformAabAae_cField(node: MultiWordDomain.AabAae) =
            transformSymbolPrimitive(node.cField)
        open fun transformAabAae_dField(node: MultiWordDomain.AabAae) =
            node.dField.map { transformLongPrimitive(it) }
        open fun transformAabAae_metas(node: MultiWordDomain.AabAae) =
            transformMetas(node.metas)
    
        // Tuple Rrr
        open fun transformRrr(node: MultiWordDomain.Rrr): MultiWordDomain.Rrr {
            val new_aField = transformRrr_aField(node)
            val new_bbbField = transformRrr_bbbField(node)
            val new_metas = transformRrr_metas(node)
            return if (
                node.aField !== new_aField ||
                node.bbbField !== new_bbbField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.Rrr(
                    aField = new_aField,
                    bbbField = new_bbbField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformRrr_aField(node: MultiWordDomain.Rrr) =
            transformLongPrimitive(node.aField)
        open fun transformRrr_bbbField(node: MultiWordDomain.Rrr) =
            transformLongPrimitive(node.bbbField)
        open fun transformRrr_metas(node: MultiWordDomain.Rrr) =
            transformMetas(node.metas)
    
        //////////////////////////////////////
        // Sum Type: SssTtt
        //////////////////////////////////////
        open fun transformSssTtt(node: MultiWordDomain.SssTtt): MultiWordDomain.SssTtt =
            when(node) {
                is MultiWordDomain.SssTtt.Lll -> transformSssTttLll(node)
                is MultiWordDomain.SssTtt.Mmm -> transformSssTttMmm(node)
            }
        // Variant SssTttLll
        open fun transformSssTttLll(node: MultiWordDomain.SssTtt.Lll): MultiWordDomain.SssTtt {
            val new_uField = transformSssTttLll_uField(node)
            val new_metas = transformSssTttLll_metas(node)
            return if (
                node.uField !== new_uField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.SssTtt.Lll(
                    uField = new_uField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformSssTttLll_uField(node: MultiWordDomain.SssTtt.Lll) =
            transformLongPrimitive(node.uField)
        open fun transformSssTttLll_metas(node: MultiWordDomain.SssTtt.Lll) =
            transformMetas(node.metas)
    
        // Variant SssTttMmm
        open fun transformSssTttMmm(node: MultiWordDomain.SssTtt.Mmm): MultiWordDomain.SssTtt {
            val new_vField = transformSssTttMmm_vField(node)
            val new_metas = transformSssTttMmm_metas(node)
            return if (
                node.vField !== new_vField ||
                node.metas !== new_metas
            ) {
                MultiWordDomain.SssTtt.Mmm(
                    vField = new_vField,
                    metas = new_metas
                )
            } else {
                node
            }
        }
        open fun transformSssTttMmm_vField(node: MultiWordDomain.SssTtt.Mmm) =
            transformSymbolPrimitive(node.vField)
        open fun transformSssTttMmm_metas(node: MultiWordDomain.SssTtt.Mmm) =
            transformMetas(node.metas)
    
    }
}

