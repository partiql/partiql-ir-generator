

/**
 * This code was generated by the PartiQL I.R. Generator.
 * Do not modify this file.  
 */
@file:Suppress("unused", "MemberVisibilityCanBePrivate", "FunctionName",
"CanBePrimaryConstructorProperty", "UNNECESSARY_SAFE_CALL",
"USELESS_ELVIS", "RemoveRedundantQualifierName", "LocalVariableName")

package org.partiql.pig.legacy.tests.generated

import com.amazon.ionelement.api.*
import org.partiql.pig.legacy.runtime.*


abstract class ToyLangIndexedToToyLangVisitorTransform : DomainVisitorTransformBase() {
    //////////////////////////////////////
    // Sum Type: Operator
    //////////////////////////////////////
    open fun transformOperator(node: ToyLangIndexed.Operator): ToyLang.Operator =
        when(node) {
            is ToyLangIndexed.Operator.Plus -> transformOperatorPlus(node)
            is ToyLangIndexed.Operator.Minus -> transformOperatorMinus(node)
            is ToyLangIndexed.Operator.Times -> transformOperatorTimes(node)
            is ToyLangIndexed.Operator.Divide -> transformOperatorDivide(node)
            is ToyLangIndexed.Operator.Modulo -> transformOperatorModulo(node)
        }
    // Variant OperatorPlus
    open fun transformOperatorPlus(node: ToyLangIndexed.Operator.Plus): ToyLang.Operator {
        val new_metas = transformOperatorPlus_metas(node)
        return ToyLang.Operator.Plus(
            metas = new_metas
        )
    }
    open fun transformOperatorPlus_metas(node: ToyLangIndexed.Operator.Plus) =
        transformMetas(node.metas)

    // Variant OperatorMinus
    open fun transformOperatorMinus(node: ToyLangIndexed.Operator.Minus): ToyLang.Operator {
        val new_metas = transformOperatorMinus_metas(node)
        return ToyLang.Operator.Minus(
            metas = new_metas
        )
    }
    open fun transformOperatorMinus_metas(node: ToyLangIndexed.Operator.Minus) =
        transformMetas(node.metas)

    // Variant OperatorTimes
    open fun transformOperatorTimes(node: ToyLangIndexed.Operator.Times): ToyLang.Operator {
        val new_metas = transformOperatorTimes_metas(node)
        return ToyLang.Operator.Times(
            metas = new_metas
        )
    }
    open fun transformOperatorTimes_metas(node: ToyLangIndexed.Operator.Times) =
        transformMetas(node.metas)

    // Variant OperatorDivide
    open fun transformOperatorDivide(node: ToyLangIndexed.Operator.Divide): ToyLang.Operator {
        val new_metas = transformOperatorDivide_metas(node)
        return ToyLang.Operator.Divide(
            metas = new_metas
        )
    }
    open fun transformOperatorDivide_metas(node: ToyLangIndexed.Operator.Divide) =
        transformMetas(node.metas)

    // Variant OperatorModulo
    open fun transformOperatorModulo(node: ToyLangIndexed.Operator.Modulo): ToyLang.Operator {
        val new_metas = transformOperatorModulo_metas(node)
        return ToyLang.Operator.Modulo(
            metas = new_metas
        )
    }
    open fun transformOperatorModulo_metas(node: ToyLangIndexed.Operator.Modulo) =
        transformMetas(node.metas)

    //////////////////////////////////////
    // Sum Type: Expr
    //////////////////////////////////////
    open fun transformExpr(node: ToyLangIndexed.Expr): ToyLang.Expr =
        when(node) {
            is ToyLangIndexed.Expr.Lit -> transformExprLit(node)
            is ToyLangIndexed.Expr.Not -> transformExprNot(node)
            is ToyLangIndexed.Expr.Nary -> transformExprNary(node)
            is ToyLangIndexed.Expr.Function -> transformExprFunction(node)
            is ToyLangIndexed.Expr.Variable -> transformExprVariable(node)
            is ToyLangIndexed.Expr.Let -> transformExprLet(node)
        }
    // Variant ExprLit
    open fun transformExprLit(node: ToyLangIndexed.Expr.Lit): ToyLang.Expr {
        val new_value = transformExprLit_value(node)
        val new_metas = transformExprLit_metas(node)
        return ToyLang.Expr.Lit(
            value = new_value,
            metas = new_metas
        )
    }
    open fun transformExprLit_value(node: ToyLangIndexed.Expr.Lit) =
        transformAnyElement(node.value)
    open fun transformExprLit_metas(node: ToyLangIndexed.Expr.Lit) =
        transformMetas(node.metas)

    // Variant ExprNot
    open fun transformExprNot(node: ToyLangIndexed.Expr.Not): ToyLang.Expr {
        val new_expr = transformExprNot_expr(node)
        val new_metas = transformExprNot_metas(node)
        return ToyLang.Expr.Not(
            expr = new_expr,
            metas = new_metas
        )
    }
    open fun transformExprNot_expr(node: ToyLangIndexed.Expr.Not) =
        transformExpr(node.expr)
    open fun transformExprNot_metas(node: ToyLangIndexed.Expr.Not) =
        transformMetas(node.metas)

    // Variant ExprNary
    open fun transformExprNary(node: ToyLangIndexed.Expr.Nary): ToyLang.Expr {
        val new_op = transformExprNary_op(node)
        val new_operands = transformExprNary_operands(node)
        val new_metas = transformExprNary_metas(node)
        return ToyLang.Expr.Nary(
            op = new_op,
            operands = new_operands,
            metas = new_metas
        )
    }
    open fun transformExprNary_op(node: ToyLangIndexed.Expr.Nary) =
        transformOperator(node.op)
    open fun transformExprNary_operands(node: ToyLangIndexed.Expr.Nary) =
        node.operands.map { transformExpr(it) }
    open fun transformExprNary_metas(node: ToyLangIndexed.Expr.Nary) =
        transformMetas(node.metas)

    // Variant ExprFunction
    open fun transformExprFunction(node: ToyLangIndexed.Expr.Function): ToyLang.Expr {
        val new_varName = transformExprFunction_varName(node)
        val new_body = transformExprFunction_body(node)
        val new_metas = transformExprFunction_metas(node)
        return ToyLang.Expr.Function(
            varName = new_varName,
            body = new_body,
            metas = new_metas
        )
    }
    open fun transformExprFunction_varName(node: ToyLangIndexed.Expr.Function) =
        transformSymbolPrimitive(node.varName)
    open fun transformExprFunction_body(node: ToyLangIndexed.Expr.Function) =
        transformExpr(node.body)
    open fun transformExprFunction_metas(node: ToyLangIndexed.Expr.Function) =
        transformMetas(node.metas)

    // Variant ExprVariable
    abstract fun transformExprVariable(node: ToyLangIndexed.Expr.Variable): ToyLang.Expr
    // Variant ExprLet
    abstract fun transformExprLet(node: ToyLangIndexed.Expr.Let): ToyLang.Expr
}
