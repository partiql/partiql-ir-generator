import java.nio.file.Paths

/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */

// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html#header
    id 'java-library'
    // https://docs.gradle.org/5.0/userguide/publishing_maven.html#header
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // compile-time dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation project(':pig-runtime')

    // test-time dependencies
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

final PIG_INPUT_DIR = './type-domains'
final PIG_OUTPUT_DIR = './src/org/partiql/pig/tests/generated/'
final PIG_TARGET_PACKAGE = 'org.partiql.pig.tests.generated'
final universesToGenerate = ['toy-lang', 'sample-universe', 'partiql-basic']

// the universe-specific tasks registered below will be added as dependencies of this task
// provides a simplified way to ask pig to generate all the universes, i.e. ./gradlew pig_all
task pig_all {
    group 'pig'
}

// Make sure all pig tasks have completed before the kotlin code is compiled.
compileKotlin.dependsOn pig_all

universesToGenerate.each({ u ->
    tasks.register("pig-generate-${u}") { generateTask ->
        group 'pig'
        def pathToPig = new File(projectDir, '../pig/build/install/pig/bin/pig').getCanonicalPath().toString()
        def pathToUniverseFile = Paths.get(projectDir.toString(), PIG_INPUT_DIR, "${u}.ion")

        tasks.findByName("pig_all").dependsOn generateTask

        // Make sure the :pig:installDist task has completed before the pig tasks are generated
        // this installs the binary and gradle-generated launch script to the build directory
        // so it is accessible to the `exec` task below.
        dependsOn project(":pig").tasks.installDist

        doLast {
            exec {
                workingDir projectDir
                commandLine pathToPig, '-u', pathToUniverseFile, '-t', 'kotlin', '-n', PIG_TARGET_PACKAGE, '-d', PIG_OUTPUT_DIR
            }
        }
    }
})

// This task removes any *.generated.kt files left behind from previous builds runs.  Without this, there is nothing to
// remove generated code for deleted and renamed PIG domains, which could be very confusing.
tasks.register('clean-pig-generated-files', Delete) {
    group 'pig'
    delete fileTree(PIG_OUTPUT_DIR).matching {
        include "*.generated.kt"
    }
}

pig_all.shouldRunAfter('clean-pig-generated-files')

ktlint {
    filter {
        exclude("**/*.generated.kt")
    }
}

test {
    useJUnitPlatform()
}
