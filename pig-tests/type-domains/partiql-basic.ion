

// This is an incomplete AST definition for PartiQL to show what a more complex domain definition will look like.
// Other than being incomplete, this differs from the V0 AST:  the names/tags are *unique* as outlined in Pig's
// README.md

(define partiql_basic
  (domain
    (sum projection
      (project_list items::(* project_item 1))
      (project_value value::expr))

    (sum project_item
      (project_all)
      (project_expr value::expr as_alias::(? symbol)))

    (sum join_type
      (inner)
      (left)
      (right)
      (outer))

    (sum from_source
      (scan expr::expr as_alias::(? symbol) at_alias::(? symbol) by_alias::(? symbol))
      (join type::join_type left::from_source right::from_source predicate::(? expr)))

    (product expr_pair first::expr second::expr)

    (product group_by_item value::expr as_alias::(? symbol))

    (product group_by_list
      items::(* group_by_item 1))

    (product group_by
      items::group_by_list
      group_as_alias::(? symbol))  // group as alias
    (sum case_sensitivity
      (case_sensitive)
      (case_insensitive))

    (sum scope_qualifier
      (unqualified)
      (qualified))

    (sum set_quantifier
      (all)
      (distinct))

    (sum path_element
      (path_expr expr::expr)
      (path_wildcard)
      (path_unpivot))

    (sum expr
      // Basic Expressions
      (lit value::ion)
      (id name::symbol case::case_sensitivity scope_qualifier::scope_qualifier)
      (parameter index::int)
      (not expr::expr)
      (plus operands::(* expr 2))
      (minus operands::(* expr 2))
      (times operands::(* expr 2))
      (divide operands::(* expr 2))
      (modulo operands::(* expr 2))
      (concat operands::(* expr 2))

      (like left::expr right::expr escape::expr)
      (between value::expr from::expr to::expr)
      (path root::expr elements::(* path_element 1))
      (call name::symbol args::(* expr 1))
      (call_agg name::symbol set_quantifier::set_quantifier arg::expr)

     // Case Statements
      (simple_case value::expr branches::(* expr_pair 1))
      (searched_case branches::(* expr_pair 1))

     // Value Constructors
      (struct fields::(* expr_pair 0))
      (bag values::(* expr 0))
      (list values::(* expr 0))

     (select
      (setq (? set_quantifier))
      (project projection)
      (from from_source)
      (where (? expr))        // where
      (group (? group_by))
      (having (? expr))        // having
      (limit (? expr))))       // limit
    ) // end domain
 ) // end define


