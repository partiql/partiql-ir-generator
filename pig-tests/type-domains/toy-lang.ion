

// This is an "AST" for a simple hypothetical language named "Toy".
// Toy has literals, variables, basic arithmetic and functions that accept a single argument.
(define toy_lang
 (domain
    (sum expr
        (lit value::ion)
        (variable name::symbol)
        (not expr::expr)
        (plus operands::(* expr 2))
        (minus operands::(* expr 2))
        (times operands::(* expr 2))
        (divide operands::(* expr 2))
        (modulo operands::(* expr 2))
        (call name::symbol argument::expr)
        (let name::symbol value::expr body::expr)
        (function var_name::symbol body::expr))))

// Define another type domain which extends "toy_lang" by removing named variables and adding DeBruijn indices:
(define toy_lang_nameless
  (permute_domain toy_lang
    (with expr
      (exclude variable let)
      (include
        (variable index::int)
        (let index::int value::expr body::expr)))))

(transform toy_lang toy_lang_nameless)

