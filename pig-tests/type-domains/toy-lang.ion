

// This is an "AST" for a simple hypothetical language named "Toy".
// Toy has literals, variables, basic arithmetic and functions that accept a single argument.
(define toy_lang
 (domain
   (sum operator (plus) (minus) (times) (divide) (modulo))
    (sum expr
        (lit value::ion)
        (variable name::symbol)
        (not expr::expr)
        (nary op::operator operands::(* expr 0))
        (let name::symbol value::expr body::expr)
        (function var_name::symbol body::expr))))

// Define another type domain which extends "toy_lang" by removing named variables and adding DeBruijn indices:
(define toy_lang_indexed
  (permute_domain toy_lang
    (with expr
      (exclude variable let)
      (include
        // We are adding the `index` element here.
        (variable name::symbol index::int)
        (let name::symbol index::int value::expr body::expr)))))

(transform toy_lang toy_lang_indexed)
(transform toy_lang_indexed toy_lang)

