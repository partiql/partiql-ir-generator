/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */

// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html#header
    id 'java-library'
    // https://docs.gradle.org/5.0/userguide/publishing_maven.html#header
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '0.9.18'
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // compile-time dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    api 'com.amazon.ion:ion-element:0.2.0'
    //implementation ':runtime'

    // test-time dependencies
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

test {
    useJUnitPlatform()
}

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
    //todo: includes = ["path/to/module.md"]
}

task sourcesJar(type: Jar) {
    from "src"
    classifier = "sources"
}

task javadocJar(type: Jar) {
    from dokka
    classifier = "javadoc"
}

publishing {
    publications {
        maven(MavenPublication) {
            // group id and version are set in the root build.gradle for all projects.
            artifactId = "partiql-ir-generator-runtime"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "PartiQL I.R. Generator (a.k.a P.I.G.) Runtime Library"
                packaging = "jar"
                url = "https://partiql.org/"
                description = "The P.I.G. is a code generator for domain models such ASTs and execution plans."
                scm {
                    connection = "scm:git@github.com:partiql/partiql-ir-generator.git"
                    developerConnection = "scm:git@github.com:partiql/partiql-ir-generator.git"
                    url = "git@github.com:partiql/partiql-ir-generator.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "Amazon Ion Team"
                        email = "ion-team@amazon.com"
                        organization = "PartiQL"
                        organizationUrl = "https://github.com/partiql"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

